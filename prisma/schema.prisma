datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Step {
  id            String    @id @default(uuid())
  description   String
  bug_report    BugReport @relation(fields: [bug_report_id], references: [id], onDelete: Cascade)
  bug_report_id String
}

model Screenshot {
  id            String    @id @default(uuid())
  url           String
  bug_report    BugReport @relation(fields: [bug_report_id], references: [id], onDelete: Cascade)
  bug_report_id String
}

model Note {
  id            String    @id @default(uuid())
  note          String
  bug_report    BugReport @relation(fields: [bug_report_id], references: [id], onDelete: Cascade)
  bug_report_id String
  created_by     User   @relation(fields: [created_by_id], references: [id], name: "CreatedNote", onDelete: Cascade)
  created_by_id  String

  created_at DateTime @default(now())
}

enum Status {
  PENDING
  ACCEPT
  DENIED
  CLOSED
}

model BugReport {
  id          String @id @default(uuid())
  description String
  title       String

  steps       Step[]
  screenshots Screenshot[]
  notes       Note[]

  status Status @default(PENDING)

  created_by     User?   @relation(fields: [created_by_id], references: [id], name: "Created", onDelete: SetNull)
  created_by_id  String?
  assigned_to    User?   @relation(fields: [assigned_to_id], references: [id], name: "Assigned", onDelete: SetNull)
  assigned_to_id String?

  external_id String? @unique

  reward    Reward? @relation(fields: [reward_id], name: "Reward", references: [id], onDelete: SetNull)
  reward_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  name        String
  role        Role    @default(USER)
  external_id String? @unique
  password    String

  assignedBugReports BugReport[] @relation("Assigned")
  createdBugReports  BugReport[] @relation("Created")
  createdNotes  Note[] @relation("CreatedNote")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
  DEV
  QA
}

model Reward {
  id   String @id @default(uuid())
  name String
  url  String

  notification_active Boolean @default(false)
  notification_title  String?
  notification_text   String?

  bug_reports BugReport[] @relation("Reward")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
